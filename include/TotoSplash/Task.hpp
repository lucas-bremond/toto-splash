////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
///	This file is part of the TotoSplash library.
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///	@file 						TotoSplash/Task.hpp
///	@author 					Lucas Bremond <lucas@axelspace.com>
///	@date 						9 Oct 2016

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __TotoSplash_Task_HPP_INCLUDED__
#define __TotoSplash_Task_HPP_INCLUDED__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SmingCore/SmingCore.h>

#include <TotoSplash/Time.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace TotoSplash
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Task
{

	public:

		enum class Status
		{

			Undefined,
			Pending,
			Executing,
			Completed,
			Failed

		} ;

								Task 										( ) ;

								Task 										( 	const 	uint&						anId,
																				const 	Time&						anExecutionTime,
																				const 	Duration&					aDuration							=	Duration::Seconds(15),
																				const 	uint&						aRuleId								=	0 ) ;

		bool					isDefined									( ) const ;
		bool					isRuleDefined								( ) const ;

		uint					getId										( ) const ;
		Task::Status 			getStatus									( ) const ;
		Time 					getExecutionTime							( ) const ;
		Duration				getDuration									( ) const ;
		uint					getRuleId									( ) const ;

		void					setStatus									(	const 	Task::Status&				aStatus								) ;

		void					start										( ) ;
		void					stop										( ) ;

		static Task 			Undefined									( ) ;

		static String			getStringOfStatus							(	const 	Task::Status&				aStatus								) ;

	private:

		uint					id_ ;
		Task::Status			status_ ;
		Time 					executionTime_ ;
		Duration				duration_ ;

		uint					ruleId_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////